package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.38

import (
	"context"
	"go-graphql-api/database"
	"go-graphql-api/graph/model"
	"go-graphql-api/logs_logic"
)

// CreateUser is the resolver for the CreateUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	user, err := database.AddUserToDB(input)
	return user, err
	//panic(fmt.Errorf("not implemented: CreateUser - CreateUser"))
}

// AddTransaction is the resolver for the AddTransaction field.
func (r *mutationResolver) AddTransaction(ctx context.Context, input model.NewTransaction) (*model.Transaction, error) {
	trans, err := database.NewTransaction(input)
	return trans, err
	//	panic(fmt.Errorf("not implemented: AddTransaction - AddTransaction"))
}

// AddGood is the resolver for the AddGood field.
func (r *mutationResolver) AddGood(ctx context.Context, input model.NewGood) (*model.Good, error) {
	good, err := database.NewGood(input)
	return good, err
	//panic(fmt.Errorf("not implemented: AddGood - AddGood"))
}

// GetUser is the resolver for the GetUser field.
func (r *queryResolver) GetUser(ctx context.Context, id string) (*model.User, error) {
	msg := "Попытка получить пользователя - "
	user, err := database.GetUserFromDB(id)
	if err != nil {
		msg = msg + "Ошибка"
	} else {
		msg = msg + "Успех"
	}
	logs_logic.Write_usual_log(logs_logic.Set_log_information(msg, "GetUser", id, user))
	return user, err
	//panic(fmt.Errorf("not implemented: GetUser - GetUser"))
}

// GetTransaction is the resolver for the GetTransaction field.
func (r *queryResolver) GetTransaction(ctx context.Context, id string) (*model.Transaction, error) {
	trans, err := database.GetTransFromDB(id)
	msg := "Попытка получить транзакцию - "
	if err != nil {
		msg = msg + "Ошибка"
	} else {
		msg = msg + "Успех"
	}
	logs_logic.Write_usual_log(logs_logic.Set_log_information(msg, "GetTransaction", id, trans))
	return trans, err
	//panic(fmt.Errorf("not implemented: GetTransaction - GetTransaction"))
}

// GetGood is the resolver for the GetGood field.
func (r *queryResolver) GetGood(ctx context.Context, id string) (*model.Good, error) {
	good, err := database.GetGoodFromDB(id)
	msg := "Попытка получить товар - "
	if err != nil {
		msg = msg + "Ошибка"
	} else {
		msg = msg + "Успех"
	}
	logs_logic.Write_usual_log(logs_logic.Set_log_information(msg, "GetGood", id, good))
	return good, err
	//panic(fmt.Errorf("not implemented: GetGood - GetGood"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
